# -*- coding: utf-8 -*-
"""Academy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F-Gjm130_CVCJtR3LMpc7Dv827NW90Eu
"""

print('hello')

a = 5
b = 10
c = 85
a+b+c
total = a + b + c
def mean():
  a = 5
  b = 10
  c = 85
  total = a + b + c
  print('Suma variabilelor a, b si c este :', total)
mean()

print(7*'-')
print('-SALUT-')
print(7*'-')

a = int(input())
b = int(input())
c = int(input())
total = a + b + c
mesaj = 'Suma variabilelor a = %d, b = %d si c=%d, total = %d' % (a,b,c, total )
print(mesaj)

fuits = ['apple', 'banana', 'cherry']
numbers = [1,2,3,4,5]
numbers[2]

letters = [ 'A', 'B', 'C', 'D','E']
letters[1:3]

animals = [ 'cat', 'dog', 'rabbit']
animals[1] = 'hamster'
print(animals)

list1 = [1,2,3]
list2 = [4,5,6]
list1+list2
numbers = [1,2,3,4,5,6,7,8,9,10]
len(numbers)

numbers = [1,2,3,4,5,6,7,8,9,10]
squares =[]
for i in numbers:
  squares1 = i **2
  squares.append(squares1)
print(squares)
#squares = [10**i for i in numbers]

colors = ['red', 'green', ' blue']
colors.append('yellow')
print(colors)

a = 5
b = 10
if a > b:
  print('Suma numerelor este: ',a+b)
else:
  print('Rezultatul inmultirii este: ',a*b)

a = 10
b = 5
c = 10
d = 5
if a == b == c == d:
  print('Avem un romb!')
if a > b and c > d and a == c and b == d:
  print('Yay, dreptunghi')
else:
  print('Habar n-am ce-i aici..')

F = C*9/5+32
C =(F-32)*5/9

select = int(input('Introduceti optiunea dorita : '))
while select >= 3:
  print('Nu ati ales o optiune valabila')
  select1 = int(input('Va rog sa alegeti optiunea dorita: '))
if select == 1:
  C = float(input('Introduceti pentru a converti din celsius in fahrenheit: '))
  fahrenheit = C*9/5+32
  print('Afara sunt ',fahrenheit,' grade fahrenheit!')
if select == 2:
  F = float(input('Introduceti pentru a converti din fahrenheit in celsius: '))
  celsius = (F-32)*5/9
  print('Afara sunt ',celsius,' grade celsius!')

x = []
for i in range(1,101):
  if i % 2 == 0:
    x.append(i)
print(x)

y = []
for i in range(101):
  if i % 5 == 0 and i % 2 == 1:
    y.append(i)
print(y)

column = input('Introduceti numarul de coloane: ')
row = input('Introduceti nr de randuri : ')

for e in range(column):

de_toate = [ 'mar','banana','ananas','cartof','conopida']
legume = ['cartof', 'conopida']
set(de_toate).intersection(legume)

#1 Legume si fructe
de_toate = [ 'mar','banana','ananas','cartof','conopida']
legume = ['cartof', 'conopida']
doar_legume = []
for i in de_toate:
  if i in legume:
      doar_legume.append(i)
print(doar_legume)

nume = ['Alex','Paul','Ion']
for A in nume:
    nume.remove(A)
nume

#2
nume = ['Alex','Paul','Ion']
fara_a = []
for i in nume:
  i1 = i.replace('a','b')
  fara_a.append(i1)
print(fara_a)

# 3
a = ['1','2','3','4']
list.reverse(a)
print(a)
a[::-1]

#3.1
b = int(input())
rev_b = int(str(b)[::-1])
print(rev_b)

#3.1
c =987654321
rev_c = int(str(c)[::-1])
print(rev_c)

#2
a = ['alex','andrei','madalina']
b = []
for i in a:
  if i.startswith('a'):
    i1 = i.replace('a','b',1)
    b.append(b)
  else:
    b.append(i)
print(b)

coloane = int(input('coloane='))
linii = int(input('linii='))

if(linii>4 and coloane>1):
  for l in range(linii):
    if(l == 0 or l==linii-1 or l==linii//2 ):
       print(coloane*'*')
    else:
       print('*')
else:
  print('No bueno')

a = ['alex','andrei','madalina']
b = []
for i in a:
  if i.startswith('a'):
    i1 = i.replace('a','b')
    b.append(i1)
  else:
    b.append(i)
print(b)

#4 Mutam item cheie cu valoare < 18 in alt dictionar.
persoane = { 'alex' : 20 , 'paul' : 15, 'mircea' : 17}
ani_18 = {}
for nume, ani in persoane.items():
  if ani > 18:
    ani_18[nume] = ani
print(ani_18)

# 5 Sirul lui Fibonacci pana la 100
max = 100
a, b = 0, 1

while a <= max:
    print(a)
    a, b = b, a + b



def main():
  num = str(input('Insert here : '))
  for i in str(num):
    if str(i) == str(i)[::-1]:
      print('Este palindrom')
    break
    if str(i) != str(i)[::-1]:
      print('Nu este palindrom')
   
main()

def range_palindroame():
    for numar in range(1, 10001):
        if str(numar) == str(numar)[::-1]:
            print(numar)

range_palindroame()

def nr_prime():
  for nr in range(1,1001):
    nr_prime = True
    for i in range(2, int(nr** 0.5)+1):
      if nr % i == 0:
        nr_prime = False
        break
    if nr_prime == True:
      print(nr)
nr_prime()

def fibonacci_test():
  max = 100
  a, b = 0, 1

  while a <= max:
      print(a)
      a, b = b, a + b

fibonacci_test()

#  max = 100
#  a, b = 0, 1
#
#  while a <= max:
#      print(a)
#      a, b = b, a + b

def fibonacci_rec(a, b ,max):
    while a < max:
        print(a)
        return fibonacci_rec(b,a+b , max)

def fibonacci_test():
    max = 100
    a, b = 0, 1
    fibonacci_rec(0,1, 88)

fibonacci_test()

#codurile asciale?:)

def criptare():
  num =''
  text = str(input('type something : '))
  for a in text:
      if 'a' < a < 'z':
        cript = ord('a') - ord(a)
        num = num +str(cript)
  for b in text: 
      if 'A' < b < 'Z':
        cript = ord('A')-ord(b)
        num = num+ str(cript)
  return num
criptare()

if i.islower():
ord('A')-ord('B')
( ord(i) - ord('A') -1 )- ord('A')
ord('A')- (ord(i)-ord('A')-1)-ord('A')
ord('A')-(ord('B')-ord('A')+1) - ord('A')

ord('A')+2

#Andrei Popica

board = [
  [5, 3, 0, 0, 7, 0, 0, 0, 0],
  [6, 0, 0, 1, 9, 5, 0, 0, 0],
  [0, 9, 8, 0, 0, 0, 0, 6, 0],
  [8, 0, 0, 0, 6, 0, 0, 0, 3],
  [4, 0, 0, 8, 0, 3, 0, 0, 1], 
  [7, 0, 0, 0, 2, 0, 0, 0, 6],
  [0, 6, 0, 0, 0, 0, 2, 8, 0],
  [0, 0, 0, 4, 1, 9, 0, 0, 5],
  [0, 0, 0, 0, 8, 0, 0, 7, 9]]

for rand0 in board:
  if board[0] == board[1] and board[0] == board[2] and board[0]== board[3] and board[0] == board[4] and board[0] == board[5] and board[0]==board[6] and board[0]==board[7] and board[0]==board[8] and board[0]==board[9]:
    print('nu se repeta')
  else:
    print('se repeta')
  break
for rand1 in board:
  if board[1] == board[2] and board[1] == board[3] and board[1] == board[4] and board[1] == board[5] and board[1]==board[6] and board[1]==board[7] and board[1]==board[8] and board[1]==board[9]:
    print('nu se repeta')
  else:
    print('se repeta')
  break
for rand1 in board:
  if board[2] == board[3] and board[2] == board[4] and board[2] == board[5] and board[2]==board[6] and board[2]==board[7] and board[2]==board[8] and board[2]==board[9]:
    print('2 nu se repeta')
  else:
    print('se repeta')
  break



# Tabla de Sudoku - Andrei
def sudokku():
  board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 6, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
]

  for rand in board:
      verif = set()
      for num in rand:
          if num != 0:
              if num in verif:
                print("se repeta randurile.")  
                return
              verif.add(num)
  print('nu se repeta randurile')
                

  for col in range(9):
    verif = set()
    for rand in board:
        num = rand[col]
        if num != 0:
            if num in verif:
                print("se repeta coloanele.")
                return
            verif.add(num)
    else:
      print('nu se repeta coloanele')
      break

#3x3?
  for rand in range(0, 9, 3):
    for col in range(0, 9, 3):
        matrice = []
        for a in range(rand, rand +3):
          for b in range(col, col +3):
            matrice.append(board[a][b])
        print(matrice)

sudokku()

def buildSquare(rowA, rowB, colA, colB):

  squareLst = []

  for row in board[rowA : rowB]:

      squareLst =  squareLst + row[colA : colB]

  return squareLst

# 1 Program care sterge duplicatele dintr-un dictionar
test_dictionar = { 'paul':20,'paul':20,'mircea':99,'paul':20}
unic_dictionar = {}
for key, value in test_dictionar.items():
    if key not in unic_dictionar.values() and value not in unic_dictionar.values():
        unic_dictionar[key] = value
print(unic_dictionar)

# 2 Get the maximum and minimum values
valori = {'a':99,'b':44,'c':98}
valori_max = max(valori.values())
print(valori_max)
valori_min = min(valori.values())
print(valori_min)

#3 Access the fifth value of each key from the dictionary
dict_lists = {'x':[11,12,13,14,15,16,17,18,19],
              'y':[21,22,23,24,25,26,27,28,29],
              'z':[31,32,33,34,35,36,37,38,39]}
dict_values= {}
for key, value in dict_lists.items():
  if len(value) > 5:
    dict_values[key] = value[5]
print(dict_values)
for key, value in dict_values.items():
  print(key, value)

class Reverse():
    def __init__(self, word):
        self.word = word
    
    def rev_word(self):
        not_rev = input("Enter a word: ")
        rev = not_rev[::-1]
        print('Inversul este :')
        return rev

inversare = Reverse('')
invers = inversare.rev_word()
print(invers)

class Circle():
  def __init__(self,aria):
    self.aria = aria

  def calcul_arie(self):
    calc_area = 3.14 * (self.aria ** 2)
    print(f"Aria cercului ceste {calc_area}")
    return calc_area

test = Circle(50)
testing = test.calcul_arie()
print(testing)

class Vehicles():
  def __innit__(self, capacity):
    self.capacity = capacity

    def fare(self):
      return self.capacity * 100

class Bus(Vehicles):
    def fare(self):
        normal_fare = super().fare()
        maintenance = .1*normal_fare 
        total_fare = normal_fare + maintenance
        return total_fare

class Student():
  def __init__(self, nume,varsta,id, profil):
    self.nume = nume
    self.varsta = varsta
    self.id = id
    self.profil = profil

class StudentSys:
  def __init__(self):
    self.students=[]

  def accept(self):
    nume = str(input('Introduceti numele studentului: '))
    varsta = int(input('Introduceti varsta studentului: '))
    id = input('Genereaza id: ')
    profil = str(input('Introdceti profilul studentului: '))
    student = Student(nume,varsta,id ,profil)
    self.students.append(student)
    print('Data inserted!')

  def display(self):
    if not self.students:
        print('Nu avem date')
    else:
        for student in self.students:
            print('Nume:', student.nume, 'Varsta:', student.varsta, 'ID:', student.id, 'Profil:', student.profil)


  def search(self,id):
    for student in self.students:
      if student.id == id:
        print('Cautarea este completa!Studentul cautat este :', student.nume)
        return
      else:
        print('Studentul nu exista in baza de date !')

  def update(self, id):
    for student in self.students:
      if student.id == id:
        nume = input("Numele studentului:  ")
        profil = input('Profilul studentului: ')
        student.nume = nume
        student.profil = profil
        print("Profil actualizat.")
        return
        print("Error 404")
  def delete(self, id):
    for student in self.students:
        if student.id == id:
            self.students.remove(student)
            print('Student sters')
            return
    print('Studentul nu exista')

  system_student = StudentSys()

  select = int(input('Alegeti optiunea (1->6): '))
  while True:
    while select > 6:
      print('Introduceti o varianta valida: ')
      select = int(input('Alegeti optiunea (1->6): '))
      if select <=6:
        print('Ati ales varianta: ', select)
      break
    if select == 1:
      print('Optiunea Accept!')
      system_student.accept()
      break
    elif select ==2:
      print('Optiunea Display')
      system_student.display()
    elif select==3:
      print('Optiunea Search')
      id= int(input('Id-ul studentului :'))
      system_student.search(id)
    elif select ==4:
      print('Optiunea Update')
      id= int(input('Id-ul studentului: '))
      system_student.update(id)
    elif select ==5:
      print('Optiunea delete')
      id= int(input('Id-ul studentului: '))
      system_student.delete(id)
      break

class Student():
    def __init__(self, nume, varsta, id, profil):
        self.nume = nume
        self.varsta = varsta
        self.id = id
        self.profil = profil

class StudentSys():
    def __init__(self):
        self.students = []

    def accept(self):
        nume = str(input('Introduceti numele studentului: '))
        varsta = int(input('Introduceti varsta studentului: '))
        id = int(input('Genereaza ID: '))
        profil = str(input('Introdceti profilul studentului: '))
        student = Student(nume, varsta, id, profil)
        self.students.append(student)
        print('Data inserted!')

    def display(self):
        if not self.students:
            print('Nu avem date')
        else:
            for student in self.students:
                print('Nume:', student.nume, 'Varsta:', student.varsta, 'ID:', student.id, 'Profil:', student.profil)

    def search(self, id):
        for student in self.students:
            if student.id == id:
                print('Cautarea este completa! Studentul cautat este:', student.nume)
                return
        print('Studentul nu exista in baza de date!')

    def update(self, id):
        for student in self.students:
            if student.id == id:
                nume = input("Numele studentului: ")
                profil = input('Profilul studentului: ')
                student.nume = nume
                student.profil = profil
                print("Profil actualizat.")
                return
        print("Error 404: Studentul nu exista!")

    def delete(self, id):
        for student in self.students:
            if student.id == id:
                self.students.remove(student)
                print('Student sters')
                return
        print('Studentul nu exista')

system_student = StudentSys()

while True:
    select = int(input('Alegeti optiunea (1->6): '))
    if select == 1:
        print('Optiunea Accept!')
        system_student.accept()
    elif select == 2:
        print('Optiunea Display')
        system_student.display()
    elif select == 3:
        print('Optiunea Search')
        id = int(input('Id-ul studentului: '))
        system_student.search(id)
    elif select == 4:
        print('Optiunea Update')
        id = int(input('Id-ul studentului: '))
        system_student.update(id)
    elif select == 5:
        print('Optiunea delete')
        id = int(input('Id-ul studentului: '))
        system_student.delete(id)
    elif select == 0:
        break
    else:
        print('Introduceti o varianta valida!')







